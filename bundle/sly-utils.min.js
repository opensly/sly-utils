!function(){"use strict";const e=(t,r,a={})=>{for(let o in t){let n=o[0].toUpperCase()+o.substring(1),l=r?r+n:o;null===t[o]?a[r?r+o[0].toUpperCase()+o.substring(1):o]=null:"object"==typeof t[o]?e(t[o],l,a):a[l]=t[o]}return a};function t(e,t){return this.splice(t,0,this.splice(e,1)[0]),this}const r=(e,t)=>{if(Array.isArray(e))return e.map((e=>"object"==typeof e&&null!==e?r(e,t):e));{let a={};for(let o in e)e.hasOwnProperty(o)&&(Array.isArray(e[o])?a[t(o)]=e[o].map((e=>"object"==typeof e&&null!==e?r(e,t):e)):null===e[o]?a[t(o)]=null:"object"==typeof e[o]?a[t(o)]=r(e[o],t):a[t(o)]=e[o]);return a}};module.exports={addMoveToArrayPrototype:function(){Array.prototype.move=t},backDate:(e,t="/",r="DDMMYYYY")=>{const a=new Date(Date.now()-24*e*60*60*1e3),o=String(a.getDate()).padStart(2,"0"),n=String(a.getMonth()+1).padStart(2,"0"),l=a.getFullYear(),s={MMDDYYYY:`${n}${t}${o}${t}${l}`,YYYYMMDD:`${l}${t}${n}${t}${o}`,DDMMYYYY:`${o}${t}${n}${t}${l}`};return s[r]||s.DDMMYYYY},camelToKebab:e=>e.replace(/\.?([A-Z])/g,(e=>"-"+e.toLowerCase().replace(/^_/,""))),camelToSnake:e=>e.replace(/\.?([A-Z])/g,(e=>"_"+e.toLowerCase().replace(/^_/,""))),chunk:(e,t)=>!e||0===e.length||t<=0?[]:(t=Math.ceil(t),Array.from({length:Math.ceil(e.length/t)},((r,a)=>e.slice(a*t,a*t+t)))),compareStrings:(e,t)=>{const r=e=>e.replace(/[^a-zA-Z0-9]/g,"").toLowerCase();e=r(e),t=r(t);const a=e.length,o=t.length;if(0===a)return o;if(0===o)return a;const n=Array.from({length:a+1},((e,t)=>Array(o+1).fill(0)));for(let e=0;e<=a;e++)n[e][0]=e;for(let e=0;e<=o;e++)n[0][e]=e;for(let r=1;r<=a;r++)for(let a=1;a<=o;a++){const o=e[r-1]===t[a-1]?0:1;n[r][a]=Math.min(n[r-1][a]+1,n[r][a-1]+1,n[r-1][a-1]+o)}return n[a][o]},doesExist:(e,t,r)=>{const a=e=>"object"==typeof e&&null!==e&&(Array.isArray(e)?e.some(a):e[t]==r||Object.values(e).some((e=>a(e))));return e.some(a)},escapeHtml:e=>void 0===e?"":e=e.toString().replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/'/g,"&#39;").replace(/"/g,"&quot;"),flattenObject:e,friendlyUrlString:e=>(e=e||"").trim().split("").map((e=>{let t="ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöùúûüýÿ".indexOf(e);return t>-1?"aaaaaaaceeeeiiiidnooooouuuuysaaaaaaaceeeeiiiidnooooouuuuyy"[t]:e})).join("").toLowerCase().replace(/[&?]/gi,"").replace(/\s\s/g,"-").replace(/\s/g,"-").replace(/-+/g,"-").replace(/[^a-z0-9-]/gi,"").trim(),groupByArrayOfObjects:(e,t)=>e.reduce(((e,r)=>"object"!=typeof r||null===r||void 0===r[t]?e:Object.assign(e,{[r[t]]:(e[r[t]]||[]).concat(r)})),{}),intersection:(e,t)=>{const r=new Set(e);return t.filter((e=>r.has(e)))},kebabToCamel:e=>e.replace(/-./g,(e=>e[1].toUpperCase())),pluck:(e,t)=>e.map((e=>e[t])),shuffle:e=>{const t=[...e];for(let e=t.length-1;e>0;e--){const r=Math.floor(Math.random()*(e+1));[t[e],t[r]]=[t[r],t[e]]}return t},snakeToCamel:e=>e.replace(/([-_][a-z])/g,(e=>e.toUpperCase().replace("_","").replace("-",""))),sortArrayOfObjects:(e,t,r="ASC")=>{const a="DESC"===r?-1:1;return e.slice().sort(((e,r)=>e[t]>r[t]?a:-a))},stripHtmlTags:e=>(e=e.toString()).replace(/<[^>]*>/g,""),transformKeys:r,uniqArrayOfObjects:e=>{const t=new Set(e.map((e=>JSON.stringify(e))));return Array.from(t).map((e=>JSON.parse(e)))}}}();
