import { areSameArrays } from './modules/areSameArrays/areSameArrays';
import { camelToKebab, camelToPascal, camelToSnake, kebabToCamel, kebabToSnake, kebabToPascal, pascalToCamel, pascalToKebab, pascalToSnake, snakeToCamel, snakeToKebab, snakeToPascal } from './modules/caseConversion/caseConversion';
import { chunk } from './modules/chunk/chunk';
import { compareStrings } from './modules/compareStrings/compareStrings';
import { backDate } from './modules/dateUtils/dateUtils';
import { deepFreeze } from './modules/deepFreeze/deepFreeze';
import { doesExist } from './modules/doesExist/doesExist';
import { escapeHtml } from './modules/escapeHtml/escapeHtml';
import { flattenObject } from './modules/flattenObject/flattenObject';
import { friendlyUrlString } from './modules/url/url';
import { groupByArrayOfObjects } from './modules/groupByArrayOfObjects/groupByArrayOfObjects';
import { intersection } from './modules/intersection/intersection';
import { mapToJson, jsonToMap } from './modules/mapAndJson/mapAndJson';
import { addMoveToArrayPrototype } from './modules/move/move';
import { pluck } from './modules/pluck/pluck';
import { shuffle } from './modules/shuffle/shuffle';
import { sortArrayOfObjects } from './modules/sortArrayOfObjects/sortArrayOfObjects';
import { stripHtmlTags } from './modules/stripHtmlTags/stripHtmlTags';
import { transformKeys } from './modules/transformKeys/transformKeys';
import { uniqArrayOfObjects } from './modules/uniqArrayOfObjects/uniqArrayOfObjects';
import { uuid, uuidShort } from './modules/uuid/uuid';
export { addMoveToArrayPrototype, areSameArrays, backDate, camelToKebab, camelToSnake, camelToPascal, chunk, compareStrings, deepFreeze, doesExist, escapeHtml, flattenObject, friendlyUrlString, groupByArrayOfObjects, intersection, jsonToMap, mapToJson, kebabToCamel, kebabToPascal, kebabToSnake, pascalToCamel, pascalToKebab, pascalToSnake, pluck, shuffle, snakeToCamel, snakeToKebab, snakeToPascal, sortArrayOfObjects, stripHtmlTags, transformKeys, uniqArrayOfObjects, uuid, uuidShort };
declare const _default: {
    addMoveToArrayPrototype: typeof addMoveToArrayPrototype;
    areSameArrays: (arr1: any[], arr2: any[]) => boolean;
    backDate: (days: number, delimiter?: string, format?: "MMDDYYYY" | "YYYYMMDD" | "DDMMYYYY") => string;
    camelToKebab: (str: string) => string;
    camelToSnake: (str: string) => string;
    camelToPascal: (str: string) => string;
    chunk: <T>(arr: T[], size: number) => T[][];
    compareStrings: (source: string, target: string) => number;
    deepFreeze: <T extends object>(obj: T) => T;
    doesExist: (arr: any[], key: string, str: any) => boolean;
    escapeHtml: (str: string) => string;
    flattenObject: (obj: Record<string, any>, parent?: string, res?: Record<string, any>) => Record<string, any>;
    friendlyUrlString: (str: string) => string;
    groupByArrayOfObjects: (collection: Record<string, any>[], identifier: string) => Record<string, Record<string, any>[]>;
    intersection: (arr1: any[], arr2: any[]) => any[];
    jsonToMap: (jsonString: string) => Map<string, any>;
    mapToJson: (map: Map<any, any>) => string;
    kebabToCamel: (str: string) => string;
    kebabToPascal: (str: string) => string;
    kebabToSnake: (str: string) => string;
    pascalToCamel: (str: string) => string;
    pascalToKebab: (str: string) => string;
    pascalToSnake: (str: string) => string;
    pluck: (store: any[], key: string) => any[];
    shuffle: (arr: any[]) => any[];
    snakeToCamel: (str: string) => string;
    snakeToKebab: (str: string) => string;
    snakeToPascal: (str: string) => string;
    sortArrayOfObjects: (collection: Record<string, any>[], identifier: string, order?: "ASC" | "DESC") => Record<string, any>[];
    stripHtmlTags: (str: string) => string;
    transformKeys: (obj: any, transformCase: (key: string) => string) => any;
    uniqArrayOfObjects: (store: any[]) => any[];
    uuid: () => string;
    uuidShort: () => string;
};
export default _default;
